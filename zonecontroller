'''
#EXAMPLE-2 isme maine is project ko aange badhaya hai aur isme two rs485 to ttl module lagaya hai. ek rs485tottl module jo hai sensor se data lega means input ki tarah kaam karega aur dusra rs485tottl module jo hai wo output ki tarah kaam karega
#means sensor ka data kisi master controller ko send karega. so sensor se data lene ke liye humne pin 1 aur 3 ka use kiya tha aur pin 16,17 ka use humne rs485 to ttl se data ko master controller par send karne ke liye kiya hai
#aur rs485tottl output wale me humne rs485tousb lagakar check kiya ki hume docklight me data mil rha hai ya nahi. aur hume data mil rha tha iska is protocol me. humne iske liye khud ka ek protocol banaya hai
#AA(start frame), zone address(01), total sensor(05), 01(sensoraddress01 status) 01(sensoraddress02 status) 01(sensoraddress03 status) 02(sensoraddress04 status) 02(sensoraddress05 status), total engaged(03), total disengaged(02), total vacancy(02), total error(00),55(End of protocol)

from machine import UART
import time

uart = UART(2, baudrate=9600, tx=3, rx=1)
uart1 = UART(1, baudrate=9600, tx=16, rx=17)
sensor_requests = ['FA0101F9', 'FA0201FA', 'FA0301FB']
sensor_status = []
zone_id = '01'  # Convert zone_id to a byte

def calculate_sensor_status(response):
    status_byte = response[2:3]
    if status_byte == b'\x01':
        return 1  # Engaged
    elif status_byte == b'\x02':
        return 2  # Disengaged
    elif status_byte == b'\x03':
        return 3  # Error
    else:
        return -1  # Invalid status

def process_sensor_requests():
    global sensor_status
    sensor_status = []
    for request in sensor_requests:
        if request.startswith('FA'):
            uart.write(bytes.fromhex(request))
            time.sleep(2)
            response = uart.read()
            if response and response[0:1] == b'\xF5':
                sensor_status.append(calculate_sensor_status(response))

    # Construct message
    total_sensors = len(sensor_status)
    total_engaged = sensor_status.count(1)
    total_disengaged = sensor_status.count(2)
    total_errors = sensor_status.count(3)
    total_vacancy = total_disengaged
    message = bytearray([0xAA, int(zone_id), total_sensors] + sensor_status + [total_engaged, total_disengaged, total_vacancy, total_errors, 0x55])
    uart1.write(message)

# Listen for slave ID from the floor controller
while True:
    process_sensor_requests()

'''
'''
#EXAMPLE-2 this code is working fine but without request response from the 
from machine import UART
import time

uart = UART(2, baudrate=9600, tx=3, rx=1)
uart1 = UART(1, baudrate=9600, tx=16, rx=17)
sensor_requests = ['FA0101F9', 'FA0201FA', 'FA0301FB']
sensor_status = []
zone_id = '01'  # Convert zone_id to a byte

def calculate_sensor_status(response):
    status_byte = response[2:3]
    if status_byte == b'\x01':
        return 1  # Engaged
    elif status_byte == b'\x02':
        return 2  # Disengaged
    elif status_byte == b'\x03':
        return 3  # Error
    else:
        return -1  # Invalid status

def process_sensor_requests():
    global sensor_status
    sensor_status = []
    for request in sensor_requests:
        if request.startswith('FA'):
            uart.write(bytes.fromhex(request))
            time.sleep(2)
            response = uart.read()
            if response and response[0:1] == b'\xF5':
                sensor_status.append(calculate_sensor_status(response))

    # Construct message
    total_sensors = len(sensor_status)
    total_engaged = sensor_status.count(1)
    total_disengaged = sensor_status.count(2)
    total_errors = sensor_status.count(3)
    total_vacancy = total_disengaged
    message = bytearray([0xAA, int(zone_id), total_sensors] + sensor_status + [total_engaged, total_disengaged, total_vacancy, total_errors, 0x55])
    uart1.write(message)

# Listen for slave ID from the floor controller
while True:
    process_sensor_requests()

'''
'''
#EXAMPLE-3 now i want that if i send the request from the floor controller to the zone controller then only it sends me the response
from machine import UART
import time

uart = UART(2, baudrate=9600, tx=3, rx=1)
uart1 = UART(1, baudrate=9600, tx=16, rx=17)
sensor_requests = ['FA0101F9', 'FA0201FA', 'FA0301FB']
sensor_status = []
zone_id = b'\x01'  # Convert zone_id to a byte

def calculate_sensor_status(response):
    status_byte = response[2:3]
    if status_byte == b'\x01':
        return 1  # Engaged
    elif status_byte == b'\x02':
        return 2  # Disengaged
    elif status_byte == b'\x03':
        return 3  # Error
    else:
        return -1  # Invalid status

def process_sensor_requests():
    global sensor_status
    sensor_status = []
    for request in sensor_requests:
        if request.startswith('FA'):
            uart.write(bytes.fromhex(request))
            time.sleep(2)
            response = uart.read()
            if response and response[0:1] == b'\xF5':
                sensor_status.append(calculate_sensor_status(response))

    # Construct message
    total_sensors = len(sensor_status)
    total_engaged = sensor_status.count(1)
    total_disengaged = sensor_status.count(2)
    total_errors = sensor_status.count(3)
    total_vacancy = total_disengaged
    message = bytearray([0xAA, int.from_bytes(zone_id, "little"), total_sensors] + sensor_status + [total_engaged, total_disengaged, total_vacancy, total_errors, 0x55])
    uart1.write(message)

# Listen for slave ID from the floor controller
while True:
    slave_id = uart1.read()
    if slave_id == zone_id:
        process_sensor_requests()
'''

'''
#EXAMPLE-4
from machine import UART
import time

uart = UART(2, baudrate=9600, tx=3, rx=1)
uart1 = UART(1, baudrate=9600, tx=16, rx=17)
uart0 = UART(0, baudrate=9600, tx=25, rx=26)

uart0.init()
sensor_requests = ['FA0101F9', 'FA0201FA', 'FA0301FB']
sensor_status = []
zone_id = '01'  # Convert zone_id to a byte

def calculate_sensor_status(response):
    status_byte = response[2:3]
    if status_byte == b'\x01':
        return 1  # Engaged
    elif status_byte == b'\x02':
        return 2  # Disengaged
    elif status_byte == b'\x03':
        return 3  # Error
    else:
        return -1  # Invalid status

def process_sensor_requests():
    global sensor_status
    sensor_status = []
    for request in sensor_requests:
        if request.startswith('FA'):
            uart.write(bytes.fromhex(request))
            time.sleep(2)
            response = uart.read()
            if response and response[0:1] == b'\xF5':
                sensor_status.append(calculate_sensor_status(response))

    # Construct message
    total_sensors = len(sensor_status)
    total_engaged = sensor_status.count(1)
    total_disengaged = sensor_status.count(2)
    total_errors = sensor_status.count(3)
    total_vacancy = total_disengaged
    message = bytearray([0xAA, int(zone_id), total_sensors] + sensor_status + [total_engaged, total_disengaged, total_vacancy, total_errors, 0x55])
    uart1.write(message)
    uart0.write(message)

# Listen for slave ID from the floor controller
while True:
    process_sensor_requests()

'''
#EXAMPLE-3 
#from I2C_LCD import I2cLcd
from machine import UART, Pin
import time

#DEFAULT_I2C_ADDR = 0x27
#i2c_lcd = I2C(scl=Pin(14), sda=Pin(13), freq=400000)
#lcd = I2cLcd(i2c_lcd, DEFAULT_I2C_ADDR, 2, 16)

# Initialize UARTs
#uart2 = UART(2, baudrate=9600, tx=Pin(25), rx=Pin(26))
uart2 = UART(2, baudrate=9600, tx=Pin(33), rx=Pin(32))
uart1 = UART(1, baudrate=9600, tx=Pin(16), rx=Pin(17))
# Disable REPL on UART0
uart = UART(0,9600,tx=Pin(3), rx=Pin(1))
uart.init(9600, bits=8, parity=None, stop=1)

sensor_requests = ['FA0101F9', 'FA0201FA', 'FA0301FB']
zone_id = '01'  # Convert zone_id to a byte

def calculate_sensor_status(response):
    status_byte = response[2:3]
    if status_byte == b'\x01':
        return 1  # Engaged
    elif status_byte == b'\x02':
        return 2  # Disengaged
    elif status_byte == b'\x03':
        return 3  # Error
    else:
        return -1  # Invalid status

def process_sensor_requests():
    sensor_status = []
    
    for request in sensor_requests:
        if request.startswith('FA'):
            uart1.write(bytes.fromhex(request))
            time.sleep(2)
            response = uart1.read()
            if response and response[0:1] == b'\xF5':
                sensor_status.append(calculate_sensor_status(response))

    # Construct message
    total_sensors = len(sensor_status)
    total_engaged = sensor_status.count(1)
    total_disengaged = sensor_status.count(2)
    total_errors = sensor_status.count(3)
    total_vacancy = total_disengaged
    message = bytearray([0xAA, int(zone_id), total_sensors] + sensor_status + [total_engaged, total_disengaged, total_vacancy, total_errors, 0x55])
    
    # Write message to UART2 (pins 3, 1) and UART0 (pins 25, 26)
    uart2.write(message)
    display = bytearray([0xDD, int.from_bytes(zone_id, "little"), total_vacancy, 0xFF])
    hex_display = ''.join('{:02x}'.format(byte) for byte in display)
    print(hex_display.upper())



# Main loop
while True:
    process_sensor_requests()
    
    '''
       lcd.clear()
       lcd.move_to(0, 0)
       lcd.putstr("DATA")
       lcd.move_to(0, 1)
       lcd.putstr("RECEIVED!")
    '''

#EXAMPLE-4 final which is working with CRC check
from machine import UART, Pin
import time

# Initialize UARTs
uart2 = UART(2, baudrate=9600, tx=Pin(33), rx=Pin(32))
uart1 = UART(1, baudrate=9600, tx=Pin(16), rx=Pin(17))
# Disable REPL on UART0
uart = UART(0, 9600, tx=Pin(3), rx=Pin(1))
uart.init(9600, bits=8, parity=None, stop=1)

sensor_requests = ['FA0101F9', 'FA0201FA', 'FA0301FB']
zone_id = b'\x01'  # Change this for each zone controller (e.g., b'\x02' for zone 2)

def crc16(data: bytearray) -> int:
    crc = 0x0000
    for byte in data:
        crc ^= byte << 8
        for _ in range(8):
            if (crc & 0x8000) != 0:
                crc = (crc << 1) ^ 0x1021
            else:
                crc = crc << 1
        crc &= 0xFFFF  # Ensure CRC remains 16-bit
    return crc

def calculate_sensor_status(response):
    status_byte = response[2:3]
    if status_byte == b'\x01':
        return 1  # Engaged
    elif status_byte == b'\x02':
        return 2  # Disengaged
    elif status_byte == b'\x03':
        return 3  # Error
    else:
        return -1  # Invalid status

def process_sensor_requests():
    sensor_status = []

    for request in sensor_requests:
        if request.startswith('FA'):
            uart1.write(bytes.fromhex(request))
            time.sleep(0.1)
            response = uart1.read()
            if response and response[0:1] == b'\xF5':
                sensor_status.append(calculate_sensor_status(response))

    # Construct message
    total_sensors = len(sensor_status)
    total_engaged = sensor_status.count(1)
    total_disengaged = sensor_status.count(2)
    total_errors = sensor_status.count(3)
    total_vacancy = total_disengaged
    message = bytearray([0xAA, int.from_bytes(zone_id, "little"), total_sensors] + sensor_status + [total_engaged, total_disengaged, total_vacancy, total_errors])
    # Calculate CRC-16
    crc = crc16(message)
    message.append(crc >> 8)  # Append high byte of CRC
    message.append(crc & 0xFF)  # Append low byte of CRC
    message.append(0x55)
    uart2.write(message)
    
    # Display part (uncomment if needed)
    display = bytearray([0xDD, int.from_bytes(zone_id, "little"), total_vacancy, 0xFF])
    hex_display = ''.join('{:02x}'.format(byte) for byte in display)
    print(hex_display.upper())

# Listen for slave ID from the floor controller
while True:
    if uart2.any():
        received_data = uart2.read()
        if received_data:
            slave_id = received_data[0:1]  # Read the first byte as slave ID
            if slave_id == zone_id:
                process_sensor_requests()
    time.sleep(1)


