#EXAMPLE-1 i am trying to make one code which can handle the multiple protocols like it will handle |C|1|8|1|28-0-#u#R96| this protocol for sending the data, |C|1|6| for clear the screen, |S|idE for setting the id, |F|0E for shifting the character. all these protocols will be handled in one code only
# without the display i will test this code with my esp32 by sending the protocol through the docklight and check whether it is working or not

import machine
import ubinascii
import re
from machine import UART, Pin
import ujson as json

# Setup UART
uart = UART(2, baudrate=9600, tx=17, rx=16)

# Simulated NVS storage for storing device ID
nvs = {}  # Replace this with actual NVS handling code

# Function to extract data from the protocol string
def extract_data(data):
    pattern = r'\|([A-Z])\|(\d+)\|([48])\|\d\|(\d+)-(\d+)-#([a-zA-Z])#([a-zA-Z])(\d+)\|'
    match = re.match(pattern, data)
    
    if not match:
        raise ValueError("Data format is incorrect")

    start_byte = match.group(1)
    ID = int(match.group(2))
    data_type = 'temporary' if match.group(3) == '4' else 'permanent'
    x_axis = int(match.group(4))
    y_axis = int(match.group(5))
    arrow = match.group(6)
    color = match.group(7)
    display_data = int(match.group(8))

    arrow_map = {'u': 'up', 'd': 'down', 'l': 'left', 'r': 'right'}
    color_map = {'R': 'red', 'G': 'green', 'B': 'blue', 'Y': 'yellow'}

    arrow_description = arrow_map.get(arrow, 'unknown')
    color_description = color_map.get(color, 'unknown')

    return {
        'start_byte': start_byte,
        'ID': ID,
        'data_type': data_type,
        'x_axis': x_axis,
        'y_axis': y_axis,
        'arrow': arrow_description,
        'color': color_description,
        'display_data': display_data
    }

# Function to handle the protocols
def handle_protocol(data):
    if data.startswith('|S|'):
        # Set ID protocol
        parts = data.split('|')
        if len(parts) >= 3:
            device_id = parts[2]
            nvs['device_id'] = device_id  # Simulate storing in NVS
            print(f"Device ID set to {device_id}")
    
    elif data.startswith('|C|'):
        # Check for clear screen command
        if data == '|C|1|6|':
            print("Clear screen command received.")
            clear_screen()  # Implement this function to clear the screen
        else:
            # Extract and handle display data
            try:
                result = extract_data(data)
                print("Extracted Data:", result)
            except ValueError as e:
                print("Error:", e)
    
    elif data.startswith('|F|'):
        # Clear data protocol
        parts = data.split('|')
        if len(parts) >= 3:
            command_id = parts[2]
            if command_id == '6':
                # Perform clear data action
                print("Clear data command received.")
    
    else:
        print("Unknown protocol")

# Function to clear the screen
def clear_screen():
    # Implement the actual screen clearing code here
    print("Screen cleared.")

# Main loop to read and process UART data
while True:
    if uart.any():
        data = uart.read().decode('utf-8').strip()
        print("Received data:", data)
        handle_protocol(data)

#EXAMPLE-2 same code is written for the esp32 in arduino
#include <Arduino.h>
#include <HardwareSerial.h>
#include <Preferences.h>
#include <regex>

HardwareSerial Serial2(2);
Preferences preferences;

void setup() {
  Serial.begin(9600);
  Serial2.begin(9600, SERIAL_8N1, 16, 17);
  preferences.begin("storage", false);
}

// Function to extract data from the protocol string
void extractData(String data) {
  std::regex pattern(R"(\|([A-Z])\|(\d+)\|([48])\|\d\|(\d+)-(\d+)-#([a-zA-Z])#([a-zA-Z])(\d+)\|)");
  std::smatch match;

  std::string s_data = data.c_str();
  if (!std::regex_search(s_data, match, pattern)) {
    Serial.println("Data format is incorrect");
    return;
  }

  char start_byte = match.str(1)[0];
  int ID = std::stoi(match.str(2));
  String data_type = (match.str(3) == "4") ? "temporary" : "permanent";
  int x_axis = std::stoi(match.str(4));
  int y_axis = std::stoi(match.str(5));
  char arrow = match.str(6)[0];
  char color = match.str(7)[0];
  int display_data = std::stoi(match.str(8));

  String arrow_description;
  switch (arrow) {
    case 'u': arrow_description = "up"; break;
    case 'd': arrow_description = "down"; break;
    case 'l': arrow_description = "left"; break;
    case 'r': arrow_description = "right"; break;
    default: arrow_description = "unknown"; break;
  }

  String color_description;
  switch (color) {
    case 'R': color_description = "red"; break;
    case 'G': color_description = "green"; break;
    case 'B': color_description = "blue"; break;
    case 'Y': color_description = "yellow"; break;
    default: color_description = "unknown"; break;
  }

  Serial.println("Extracted Data:");
  Serial.println("Start Byte: " + String(start_byte));
  Serial.println("ID: " + String(ID));
  Serial.println("Data Type: " + data_type);
  Serial.println("X Axis: " + String(x_axis));
  Serial.println("Y Axis: " + String(y_axis));
  Serial.println("Arrow: " + arrow_description);
  Serial.println("Color: " + color_description);
  Serial.println("Display Data: " + String(display_data));
}

// Function to handle the protocols
void handleProtocol(String data) {
  if (data.startsWith("|S|")) {
    // Set ID protocol
    int startIdx = data.indexOf('|', 3);
    if (startIdx != -1) {
      String device_id = data.substring(3, startIdx);
      preferences.putString("device_id", device_id);
      Serial.println("Device ID set to " + device_id);
    }
  } else if (data.startsWith("|C|")) {
    // Check for clear screen command
    if (data == "|C|1|6|") {
      Serial.println("Clear screen command received.");
      clearScreen();
    } else {
      // Extract and handle display data
      try {
        extractData(data);
      } catch (const std::exception &e) {
        Serial.println("Error: " + String(e.what()));
      }
    }
  } else if (data.startsWith("|F|")) {
    // Clear data protocol
    int startIdx = data.indexOf('|', 3);
    if (startIdx != -1) {
      String command_id = data.substring(3, startIdx);
      if (command_id == "6") {
        Serial.println("Clear data command received.");
      }
    }
  } else {
    Serial.println("Unknown protocol");
  }
}

// Function to clear the screen
void clearScreen() {
  // Implement the actual screen clearing code here
  Serial.println("Screen cleared.");
}

void loop() {
  if (Serial2.available()) {
    String data = Serial2.readStringUntil('\n');
    data.trim();
    Serial.println("Received data: " + data);
    handleProtocol(data);
  }
}
